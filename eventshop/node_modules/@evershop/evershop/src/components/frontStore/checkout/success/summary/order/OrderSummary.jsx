import PropTypes from 'prop-types';
import React, { useEffect, useState } from 'react';
import { Discount } from '@components/frontStore/checkout/success/summary/order/Discount';
import { Shipping } from '@components/frontStore/checkout/success/summary/order/Shipping';
import { Subtotal } from '@components/frontStore/checkout/success/summary/order/Subtotal';
import { Tax } from '@components/frontStore/checkout/success/summary/order/Tax';
import { Total } from '@components/frontStore/checkout/success/summary/order/Total';
import { keccak256 } from 'web3-utils';
import axios from 'axios';


function OrderSummary({
  items,
  subTotal,
  subTotalInclTax,
  shippingMethodName,
  shippingFeeInclTax,
  taxAmount,
  discountAmount,
  grandTotal,
  displayCheckoutPriceIncludeTax,
  hashedCartId // Dodanie prop `hashedCartId` do deklaracji
}) {
  const [cartId, setCartId] = useState(null);
  const [transactionWithHashedCartId, setTransactionWithHashedCartId] = useState(null);
  const [cartIdDisplay, setCartIdDisplay] = useState(null);
  const [hashDisplay, setHashDisplay] = useState(null);
  const [transactionExplorerLinkDisplay, setTransactionExplorerLinkDisplay] = useState(null);

  useEffect(() => {
  const currentURL = window.location.href;
  const urlParts = currentURL.split('/');
  const cartIdFromURL = urlParts[urlParts.length - 1];

  if (cartIdFromURL) {
    console.log('Pobrany cartId:', cartIdFromURL);
    setCartId(cartIdFromURL);
  }
  
  // Użycie hashedCartId jako zależności wewnątrz tego samego useEffect
  if (cartIdFromURL && hashedCartId) {
    const fetchTransaction = async () => {
      try {
        const response = await axios.post('https://api.harmony.one', {
          jsonrpc: '2.0',
          method: 'hmy_getTransactionsHistory',
          params: [
            {
              address: 'one14qq5rax2det63l4v78wscn55asn4hjknmgtdky',
              pageIndex: 0,
              pageSize: 100,
              fullTx: true,
              txType: 'ALL',
              order: 'ASC',
            },
          ],
          id: 1,
        });

        const transactions = response.data.result.transactions;
        console.log('Pobrany transactions:', transactions);

        if (transactions) {
          console.log('Pobrany keccak:', hashedCartId);
          setTransactionWithHashedCartId(
            transactions.find(
              (transaction) => transaction.blockHash === hashedCartId
            )
          );
        }
      } catch (error) {
        console.error('Błąd podczas wysyłania zamówienia:', error);
      }
    };

    fetchTransaction();
  }
}, [hashedCartId]);

  useEffect(() => {
    if (cartId && transactionWithHashedCartId) {
      setCartIdDisplay(<p>cartId: {cartId}</p>);
      setHashDisplay(<p>hash: {transactionWithHashedCartId.hash}</p>);
      setTransactionExplorerLinkDisplay(
        <p>
          transactionExplorerLink:
          <a
            href={`https://explorer.harmony.one/tx/${transactionWithHashedCartId.hash}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            {`https://explorer.harmony.one/tx/${transactionWithHashedCartId.hash}`}
          </a>
        </p>
      );
    }
  }, [cartId, transactionWithHashedCartId]);

  return (
    <div className="checkout-summary-block">
      <Subtotal
        count={items.length}
        total={
          displayCheckoutPriceIncludeTax ? subTotalInclTax.text : subTotal.text
        }
      />
      <Shipping method={shippingMethodName} cost={shippingFeeInclTax.text} />
      {!displayCheckoutPriceIncludeTax && (
        <Tax taxClass="" amount={taxAmount.text} />
      )}
      <Discount code="" amount={discountAmount.text} />
      <Total
        total={grandTotal.value}
        taxAmount={taxAmount.value}
        displayCheckoutPriceIncludeTax={displayCheckoutPriceIncludeTax}
      />

      <div>
        {cartId}
        {hashDisplay}
        {transactionExplorerLinkDisplay}
      </div>
    </div>
   );
  }
OrderSummary.propTypes = {
  discountAmount: PropTypes.shape({
    text: PropTypes.string.isRequired
  }),
  grandTotal: PropTypes.shape({
    text: PropTypes.string.isRequired
  }),
  items: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      name: PropTypes.string.isRequired,
      quantity: PropTypes.number.isRequired,
      price: PropTypes.shape({
        text: PropTypes.string.isRequired
      }).isRequired
    })
  ).isRequired,
  shippingFeeInclTax: PropTypes.shape({
    text: PropTypes.string.isRequired
  }),
  shippingMethodName: PropTypes.string,
  subTotal: PropTypes.shape({
    text: PropTypes.string
  }),
  subTotalInclTax: PropTypes.shape({
    text: PropTypes.string
  }),
  taxAmount: PropTypes.shape({
    text: PropTypes.string
  }),
  displayCheckoutPriceIncludeTax: PropTypes.bool.isRequired,
  eContext: PropTypes.object.isRequired,
  hashedCartId: PropTypes.string.isRequired // Dodanie PropTypes dla hashedCartId
};

OrderSummary.defaultProps = {
  discountAmount: {
    text: '0.00'
  },
  grandTotal: {
    text: '0.00'
  },
  shippingFeeInclTax: {
    text: '0.00'
  },
  shippingMethodName: 'Free Shipping',
  subTotal: {
    text: '0.00'
  },
  subTotalInclTax: {
    text: '0.00'
  },
  taxAmount: {
    text: '0.00'
  }
};

export { OrderSummary };
