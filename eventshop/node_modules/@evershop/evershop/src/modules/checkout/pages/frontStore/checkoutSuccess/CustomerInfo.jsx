import PropTypes from 'prop-types';
import React, { useState, useEffect } from 'react';
import Button from '@components/common/form/Button';
import { AddressSummary } from '@components/common/customer/address/AddressSummary';
import { _ } from '@evershop/evershop/src/lib/locale/translate';
import { keccak256 } from 'web3-utils'; // Import funkcji keccak256
import axios from 'axios'; // Import axios
import QRCode from 'qrcode.react';

export default function CustomerInfo({
  order: {
    orderNumber,
    customerFullName,
    customerEmail,
    paymentMethodName,
    shippingAddress,
    billingAddress,
  },
}) {
  const [cartId, setCartId] = useState(null);
  const [hashedCartId, setHashedCartId] = useState(null);
  const [transactionWithHashedCartId, setTransactionWithHashedCartId] = useState(null);
  const [transactionExplorerLinkDisplay, setTransactionExplorerLinkDisplay] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const currentURL = window.location.href;
      const urlParts = currentURL.split('/');
      const cartIdFromURL = urlParts[urlParts.length - 1];

      if (cartIdFromURL) {
        console.log('Pobrany cartId:', cartIdFromURL);
        setCartId(cartIdFromURL);
      }

      if (cartIdFromURL) {
        const hashedId = keccak256(cartIdFromURL);
        setHashedCartId(hashedId);

        try {
          const buyResult = await axios.post(
            'http://43.157.58.142:3001/sendBuy',
            { data: hashedId },
            {
              headers: {
                'Content-Type': 'application/json',
                'X-Chainlink-EA-AccessKey': 'ba3b0e9ffec34c8ab7db737992ec2d6d',
                'X-Chainlink-EA-Secret': 'mHc3Hdx4fyctCm0aWqsXYeLyRXuTuim/3JSd0uo7AdwjsCOjNX5DgPN+V5rhlFhz',
              },
            }
          );
          console.log('Buy result:', buyResult);
        } catch (error) {
          console.error('Error occurred during buy:', error);
        }
      }
    };

    fetchData();
  }, []);

useEffect(() => {
  const fetchTransaction = async () => {
  setTimeout(async () => {
    try {
      const response = await axios.post('https://api.harmony.one', {
        jsonrpc: '2.0',
        method: 'hmy_getTransactionsHistory',
        params: [
          {
            address: 'one14qq5rax2det63l4v78wscn55asn4hjknmgtdky',
            pageIndex: 0,
            pageSize: 100,
            fullTx: true,
            txType: 'ALL',
            order: 'ASC',
          },
        ],
        id: 1,
      });

      const trans = response.data.result.transactions;
      console.log('Pobrany trans:', trans);

      if (trans) {
        console.log('Pobrany keccak:', hashedCartId);
        setTransactionWithHashedCartId(
          trans.find((trans) => trans.input === hashedCartId)
        );
      }
      console.log('Pobrany transactionWithHashedCartId:', transactionWithHashedCartId);
    } catch (error) {
      console.error('Błąd podczas wysyłania zamówienia:', error);
    }

    console.log('Pobrany transactionExplorerLinkDisplay:', transactionExplorerLinkDisplay);
    }, 2000); 
  };

  fetchTransaction();
}, [hashedCartId, transactionWithHashedCartId]);

useEffect(() => {
  setTimeout(async () => {
    if (transactionWithHashedCartId) {
      setTransactionExplorerLinkDisplay(
        `https://explorer.harmony.one/tx/${transactionWithHashedCartId.hash}`
      );
    }
  }, 3000);
}, [transactionWithHashedCartId, transactionExplorerLinkDisplay]);
  
  return (
    <div className="checkout-success-customer-info">
      <h3 className="thank-you flex justify-start space-x-2">
        <div className="check flex justify-center self-center text-interactive">
          <svg
            style={{ width: '3rem', height: '3rem' }}
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M5 13l4 4L19 7"
            />
          </svg>
        </div>
        <div className="self-center">
          <span style={{ fontSize: '1.6rem', fontWeight: '300' }}>
            {_('Order #${orderNumber}', { orderNumber })}
          </span>
          <div>
            {_('Thank you ${name}!', {
              name: customerFullName || billingAddress?.fullName
            })}
          </div>
        </div>
      </h3>

      <div className="customer-info mt-3 mb-2">
        <div className="grid grid-cols-2 gap-3">
          <div className="grid grid-cols-1 gap-3">
            <div className="mb-2">
              <div className="mb-075">
                <h3>{_('Contact information')}</h3>
              </div>
              <div className="text-textSubdued">
                {customerFullName || billingAddress?.fullName}
              </div>
              <div className="text-textSubdued">{customerEmail}</div>
            </div>
            <div>
              <div className="mb-075">
                <h3>{_('Shipping Address')}</h3>
              </div>
              <div className="text-textSubdued">
                <AddressSummary address={shippingAddress} />
              </div>
            </div>
          </div>
          <div className="grid grid-cols-1 gap-3">
            <div className="mb-2">
              <div className="mb-075">
                <h3>{_('Payment Method')}</h3>
              </div>
              <div className="text-textSubdued">{paymentMethodName}</div>
            </div>
            <div>
              <div className="mb-075">
                <h3>{_('Billing Address')}</h3>
              </div>
              <div className="text-textSubdued">
                <AddressSummary address={billingAddress} />
              </div>
            </div>
          </div>
        </div>
      </div>
      <Button url="/" title={_('CONTINUE SHOPPING')} /><br />
      {transactionExplorerLinkDisplay}<br /><br />
      <h3>Your ticket:</h3><br />
        QR Code:
        {transactionExplorerLinkDisplay && (
        <QRCode value={transactionExplorerLinkDisplay} size={300} />
        )}
    </div>
  );
}

CustomerInfo.propTypes = {
  order: PropTypes.shape({
    orderNumber: PropTypes.string.isRequired,
    customerFullName: PropTypes.string,
    customerEmail: PropTypes.string.isRequired,
    paymentMethodName: PropTypes.string.isRequired,
    shippingAddress: PropTypes.shape({
      fullName: PropTypes.string,
      postcode: PropTypes.string,
      telephone: PropTypes.string,
      country: PropTypes.shape({
        name: PropTypes.string,
        code: PropTypes.string,
      }),
      province: PropTypes.shape({
        name: PropTypes.string,
        code: PropTypes.string,
      }),
      city: PropTypes.string,
      address1: PropTypes.string,
      address2: PropTypes.string,
    }),
    billingAddress: PropTypes.shape({
      fullName: PropTypes.string,
      postcode: PropTypes.string,
      telephone: PropTypes.string,
      country: PropTypes.shape({
        name: PropTypes.string,
        code: PropTypes.string,
      }),
      province: PropTypes.shape({
        name: PropTypes.string,
        code: PropTypes.string,
      }),
      city: PropTypes.string,
      address1: PropTypes.string,
      address2: PropTypes.string,
    }),
  }).isRequired,
};

export const layout = {
  areaId: 'checkoutSuccessPageLeft',
  sortOrder: 10,
};

export const query = `
  query Query {
    order (uuid: getContextValue('orderId')) {
      orderNumber
      customerFullName
      customerEmail
      paymentMethodName
      shippingAddress {
        fullName
        postcode
        telephone
        country {
          name
          code
        }
        province {
          name
          code
        }
        city
        address1
        address2
      }
      billingAddress {
        fullName
        postcode
        telephone
        country {
          name
          code
        }
        province {
          name
          code
        }
        city
        address1
        address2
      }
    }
  }
`;
