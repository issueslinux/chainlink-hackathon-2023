/* eslint-disable camelcase */
const {
  rollback,
  insert,
  commit,
  startTransaction,
  select
} = require('@evershop/postgres-query-builder');
const {
  getConnection
} = require('@evershop/evershop/src/lib/postgres/connection');
const {
  OK,
  INTERNAL_SERVER_ERROR,
  INVALID_PAYLOAD
} = require('@evershop/evershop/src/lib/util/httpStatus');

// eslint-disable-next-line no-unused-vars
module.exports = async (request, response, deledate, next) => {
  const connection = await getConnection();
  await startTransaction(connection);
  const { class_id } = request.params;
  const gasPrices = request.body; // Oczekujemy danych w formacie { 1: 0.1234, 2: 0.013, ... }

  try {
    // Tutaj możemy pominąć pobieranie z tabeli 'tax_class', jeśli nie jest potrzebne

    // Iterujemy przez przesłane dane i dodajemy je do tabeli 'gas_price'
    const insertedGasPrices = [];
    for (const key in gasPrices) {
      const price = gasPrices[key];
      const gasPrice = await insert('gas_price')
        .given({
          name: `Price ${key}`, // Przykładowa nazwa dla każdej ceny
          // ... inne dane z gasPrices[key]
          price // Przyjmujemy wartość ceny z gasPrices[key]
        })
        .execute(connection);
      insertedGasPrices.push(gasPrice);
    }

    await commit(connection);
    response.status(OK);
    response.json({
      data: insertedGasPrices
    });
  } catch (e) {
    await rollback(connection);
    response.status(INTERNAL_SERVER_ERROR);
    response.json({
      error: {
        status: INTERNAL_SERVER_ERROR,
        message: e.message
      }
    });
  }
};
