/* eslint-disable camelcase */
const {
  rollback,
  insert,
  commit,
  startTransaction,
  select
} = require('@evershop/postgres-query-builder');
const {
  getConnection
} = require('@evershop/evershop/src/lib/postgres/connection');
const {
  OK,
  INTERNAL_SERVER_ERROR,
  INVALID_PAYLOAD
} = require('@evershop/evershop/src/lib/util/httpStatus');

// eslint-disable-next-line no-unused-vars
module.exports = async (request, response, deledate, next) => {
  const connection = await getConnection();
  await startTransaction(connection);
  const { class_id } = request.params;
  const taxRates = request.body; // Oczekujemy danych w formacie { 1: 0.1234, 2: 0.013, ... }

  try {
    const taxClass = await select()
      .from('tax_class')
      .where('uuid', '=', class_id)
      .load(connection);

    if (!taxClass) {
      response.status(INVALID_PAYLOAD);
      response.json({
        error: {
          status: INVALID_PAYLOAD,
          message: 'Tax class not found'
        }
      });
      return;
    }

    // Iterujemy przez przesłane dane i dodajemy je do bazy
    const insertedRates = [];
    for (const key in taxRates) {
      const rate = taxRates[key];
      const taxRate = await insert('tax_rate')
        .given({
          name: `Rate ${key}`, // Przykładowa nazwa dla każdej stawki
          country: 'Country', // Przykładowy kraj dla każdej stawki
          // ... inne dane z taxRates[key]
          rate, // Przyjmujemy wartość stawki z taxRates[key]
          is_compound: 0, // Przykładowe ustawienie
          priority: 1, // Przykładowe ustawienie
          tax_class_id: taxClass.tax_class_id
        })
        .execute(connection);
      insertedRates.push(taxRate);
    }

    await commit(connection);
    response.status(OK);
    response.json({
      data: insertedRates
    });
  } catch (e) {
    await rollback(connection);
    response.status(INTERNAL_SERVER_ERROR);
    response.json({
      error: {
        status: INTERNAL_SERVER_ERROR,
        message: e.message
      }
    });
  }
};
